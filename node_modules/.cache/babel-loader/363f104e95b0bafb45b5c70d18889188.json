{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\86130\\\\Desktop\\\\react-advanced\\\\starter-project-react-github-search-users\\\\src\\\\context\\\\context.js\";\nimport React, { useState, useEffect } from \"react\";\nimport mockUser from \"./mockData.js/mockUser\";\nimport mockRepos from \"./mockData.js/mockRepos\";\nimport mockFollowers from \"./mockData.js/mockFollowers\";\nimport axios from \"axios\";\nconst rootUrl = \"https://api.github.com\";\nconst GithubContext = React.createContext();\n\nconst GithubProvider = ({\n  children\n}) => {\n  const [githubUser, setGithubUser] = useState(mockUser);\n  const [repos, setRepos] = useState(mockRepos);\n  const [followers, setFollowers] = useState(mockFollowers); // request loading\n\n  const [requests, setRequests] = useState(0);\n  const [loaing, setLoading] = useState(false); // error\n\n  const [error, setError] = useState({\n    show: false,\n    message: \"\"\n  });\n\n  const searchGithubUser = async user => {\n    console.log(user);\n    const response = await axios(`${rootUrl}/users${user}`);\n  }; // check rate\n\n\n  const checkRequests = () => {\n    axios(`${rootUrl}/rate_limit`).then(({\n      data\n    }) => {\n      console.log(data);\n      let {\n        rate: {\n          remaining\n        }\n      } = data; // remaining = 0;\n\n      setRequests(remaining);\n\n      if (remaining === 0) {\n        toggleError(true, \"sorry,you have exceeded your hourly rate limit!\");\n      }\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  function toggleError(show = false, msg = \"\") {\n    setError({\n      show,\n      msg\n    });\n  } // error\n\n\n  useEffect(checkRequests, []);\n  return /*#__PURE__*/React.createElement(GithubContext.Provider, {\n    value: {\n      githubUser,\n      repos,\n      followers,\n      requests,\n      error,\n      searchGithubUser\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nexport { GithubProvider, GithubContext };","map":{"version":3,"sources":["C:/Users/86130/Desktop/react-advanced/starter-project-react-github-search-users/src/context/context.js"],"names":["React","useState","useEffect","mockUser","mockRepos","mockFollowers","axios","rootUrl","GithubContext","createContext","GithubProvider","children","githubUser","setGithubUser","repos","setRepos","followers","setFollowers","requests","setRequests","loaing","setLoading","error","setError","show","message","searchGithubUser","user","console","log","response","checkRequests","then","data","rate","remaining","toggleError","catch","err","msg"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,OAAOC,aAAP,MAA0B,6BAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,OAAO,GAAG,wBAAhB;AAEA,MAAMC,aAAa,GAAGR,KAAK,CAACS,aAAN,EAAtB;;AAEA,MAAMC,cAAc,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AACvC,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAACE,QAAD,CAA5C;AACA,QAAM,CAACW,KAAD,EAAQC,QAAR,IAAoBd,QAAQ,CAACG,SAAD,CAAlC;AACA,QAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4BhB,QAAQ,CAACI,aAAD,CAA1C,CAHuC,CAIvC;;AACA,QAAM,CAACa,QAAD,EAAWC,WAAX,IAA0BlB,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACmB,MAAD,EAASC,UAAT,IAAuBpB,QAAQ,CAAC,KAAD,CAArC,CANuC,CAOvC;;AACA,QAAM,CAACqB,KAAD,EAAQC,QAAR,IAAoBtB,QAAQ,CAAC;AAAEuB,IAAAA,IAAI,EAAE,KAAR;AAAeC,IAAAA,OAAO,EAAE;AAAxB,GAAD,CAAlC;;AAEA,QAAMC,gBAAgB,GAAG,MAAOC,IAAP,IAAgB;AACvCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,UAAMG,QAAQ,GAAG,MAAMxB,KAAK,CAAE,GAAEC,OAAQ,SAAQoB,IAAK,EAAzB,CAA5B;AACD,GAHD,CAVuC,CAcvC;;;AACA,QAAMI,aAAa,GAAG,MAAM;AAC1BzB,IAAAA,KAAK,CAAE,GAAEC,OAAQ,aAAZ,CAAL,CACGyB,IADH,CACQ,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAc;AAClBL,MAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACA,UAAI;AACFC,QAAAA,IAAI,EAAE;AAAEC,UAAAA;AAAF;AADJ,UAEAF,IAFJ,CAFkB,CAKlB;;AACAd,MAAAA,WAAW,CAACgB,SAAD,CAAX;;AACA,UAAIA,SAAS,KAAK,CAAlB,EAAqB;AACnBC,QAAAA,WAAW,CAAC,IAAD,EAAO,iDAAP,CAAX;AACD;AACF,KAXH,EAYGC,KAZH,CAYUC,GAAD,IAAS;AACdV,MAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACD,KAdH;AAeD,GAhBD;;AAiBA,WAASF,WAAT,CAAqBZ,IAAI,GAAG,KAA5B,EAAmCe,GAAG,GAAG,EAAzC,EAA6C;AAC3ChB,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAF;AAAQe,MAAAA;AAAR,KAAD,CAAR;AACD,GAlCsC,CAmCvC;;;AACArC,EAAAA,SAAS,CAAC6B,aAAD,EAAgB,EAAhB,CAAT;AACA,sBACE,oBAAC,aAAD,CAAe,QAAf;AACE,IAAA,KAAK,EAAE;AACLnB,MAAAA,UADK;AAELE,MAAAA,KAFK;AAGLE,MAAAA,SAHK;AAILE,MAAAA,QAJK;AAKLI,MAAAA,KALK;AAMLI,MAAAA;AANK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUGf,QAVH,CADF;AAcD,CAnDD;;AAqDA,SAASD,cAAT,EAAyBF,aAAzB","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport mockUser from \"./mockData.js/mockUser\";\r\nimport mockRepos from \"./mockData.js/mockRepos\";\r\nimport mockFollowers from \"./mockData.js/mockFollowers\";\r\nimport axios from \"axios\";\r\n\r\nconst rootUrl = \"https://api.github.com\";\r\n\r\nconst GithubContext = React.createContext();\r\n\r\nconst GithubProvider = ({ children }) => {\r\n  const [githubUser, setGithubUser] = useState(mockUser);\r\n  const [repos, setRepos] = useState(mockRepos);\r\n  const [followers, setFollowers] = useState(mockFollowers);\r\n  // request loading\r\n  const [requests, setRequests] = useState(0);\r\n  const [loaing, setLoading] = useState(false);\r\n  // error\r\n  const [error, setError] = useState({ show: false, message: \"\" });\r\n\r\n  const searchGithubUser = async (user) => {\r\n    console.log(user);\r\n    const response = await axios(`${rootUrl}/users${user}`);\r\n  };\r\n  // check rate\r\n  const checkRequests = () => {\r\n    axios(`${rootUrl}/rate_limit`)\r\n      .then(({ data }) => {\r\n        console.log(data);\r\n        let {\r\n          rate: { remaining },\r\n        } = data;\r\n        // remaining = 0;\r\n        setRequests(remaining);\r\n        if (remaining === 0) {\r\n          toggleError(true, \"sorry,you have exceeded your hourly rate limit!\");\r\n        }\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n  function toggleError(show = false, msg = \"\") {\r\n    setError({ show, msg });\r\n  }\r\n  // error\r\n  useEffect(checkRequests, []);\r\n  return (\r\n    <GithubContext.Provider\r\n      value={{\r\n        githubUser,\r\n        repos,\r\n        followers,\r\n        requests,\r\n        error,\r\n        searchGithubUser,\r\n      }}\r\n    >\r\n      {children}\r\n    </GithubContext.Provider>\r\n  );\r\n};\r\n\r\nexport { GithubProvider, GithubContext };\r\n"]},"metadata":{},"sourceType":"module"}